{"version":3,"file":"static/js/140.5125c5e1.chunk.js","mappings":"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","sources":["redux/filter/filter-selectors.js","redux/contacts/contacts-selectors.js","components/ContactsListItem/ContactsListItem.styled.js","components/ContactsListItem/ContactsListItem.js","components/ContactsList/ContactsList.styled.js","components/ContactsList/ContactsList.js","components/ContactForm/ContactForm.styled.js","components/ContactForm/ContactForm.js","components/Filter/Filter.styled.js","components/Filter/Filter.js","pages/ContactsBook/ContactsBook.styled.js","pages/ContactsBook/ContactsBook.js"],"sourcesContent":["export const selectFilter = state => state.filter;\n","import { createSelector } from '@reduxjs/toolkit';\nimport { selectFilter } from '../filter/filter-selectors';\n\nexport const selectContacts = state => state.contacts.contacts;\n\nexport const selectIsContactsFetching = state =>\n  state.contacts.isLoading.fetchContacts;\n\nexport const selectIsContactAdded = state =>\n  state.contacts.isLoading.addContact;\n\nexport const selectIsContactDeleted = state =>\n  state.contacts.isLoading.deleteContact;\n\nexport const selectError = state => state.contacts.error;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const loweredFilter = filter.toLowerCase();\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(loweredFilter)\n    );\n  }\n);\n","import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  width: calc((100% - 66px) / 3);\n  font-size: 18px;\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n\n  border: 1px solid gray;\n  padding: 15px 5px;\n  border-radius: 4px;\n`;\n\nexport const Button = styled.button`\n  position: relative;\n  min-width: 70px;\n`;\n\nexport const Name = styled.span``;\n\nexport const Number = styled.a`\n  font-weight: 700;\n  cursor: pointer;\n  padding: 0;\n\n  color: black;\n\n  transition: color 150ms linear;\n\n  :hover {\n    color: tomato;\n  }\n`;\n","import { ListItem, Button, Name, Number } from './ContactsListItem.styled';\nimport { deleteContact } from 'redux/contacts/contacts-operations';\nimport { useDispatch } from 'react-redux';\n\nimport { useState } from 'react';\n\nconst ContactsListItem = ({ id, name, number }) => {\n  const dispatch = useDispatch();\n  const [isLoading, setIsLoading] = useState(false);\n\n  return (\n    <ListItem>\n      <Name>{name}</Name>\n      <Number href={`tel:${number}`}>{number}</Number>\n      <Button\n        onClick={() => {\n          dispatch(deleteContact(id));\n          setIsLoading(true);\n        }}\n        disabled={isLoading}\n      >\n        {isLoading ? 'Loading' : 'Delete'}\n      </Button>\n    </ListItem>\n  );\n};\n\nexport default ContactsListItem;\n","import styled from '@emotion/styled';\n\nexport const ContactsListEl = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n\n  gap: 15px;\n`;\n","// react\nimport { useEffect } from 'react';\n\n// redux\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/contacts-operations';\nimport {\n  selectFilteredContacts,\n  selectIsContactsFetching,\n} from 'redux/contacts/contacts-selectors';\n\n// components\nimport Spinner from '../Spinner';\nimport ContactsListItem from '../ContactsListItem';\n\n// styles\nimport { ContactsListEl } from './ContactsList.styled';\n\nexport const ContactsList = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const contacts = useSelector(selectFilteredContacts);\n  const isLoading = useSelector(selectIsContactsFetching);\n\n  return (\n    <ContactsListEl>\n      {isLoading ? (\n        <Spinner width={80} height={80} styles={{ margin: '0 auto' }} />\n      ) : (\n        contacts.map(({ name, number, id }) => (\n          <ContactsListItem key={id} name={name} number={number} id={id} />\n        ))\n      )}\n    </ContactsListEl>\n  );\n};\n","import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\nexport const FormEl = styled(Form)`\n  padding: 15px;\n  margin: 0 auto 15px;\n  width: 350px;\n\n  background-color: lightgray;\n  border: 1px solid grey;\n  border-radius: 4px;\n`;\n\nexport const Input = styled(Field)`\n  height: 30px;\n  font-size: 16px;\n\n  border-radius: 5px;\n  border: 1px solid grey;\n`;\n\nexport const ErrorMessageEl = styled(ErrorMessage)`\n  color: red !important;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  gap: 4px;\n\n  margin-bottom: 15px;\n`;\n\nexport const Button = styled.button`\n  position: relative;\n  font-size: 16px;\n\n  width: 150px;\n  height: 40px;\n\n  display: block;\n  margin: 0 auto;\n\n  color: white;\n  background-color: tomato;\n\n  box-shadow: 0 4px 4px rgba(0, 0, 0, 0.15);\n  opacity: 1;\n  transition: opacity 0.25s cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover {\n    opacity: 0.8;\n    transition: opacity 0.25s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n`;\n","// formik\nimport { Formik } from 'formik';\nimport { object, string, number } from 'yup';\n\n// redux\nimport {\n  selectContacts,\n  selectIsContactAdded,\n} from 'redux/contacts/contacts-selectors';\nimport { addContact } from 'redux/contacts/contacts-operations';\nimport { useDispatch, useSelector } from 'react-redux';\n\n// notification\nimport {\n  NotificationContainer,\n  NotificationManager,\n} from 'react-notifications';\nimport 'react-notifications/lib/notifications.css';\n\n// styles\nimport {\n  FormEl,\n  Label,\n  Input,\n  Button,\n  ErrorMessageEl,\n} from './ContactForm.styled';\nimport Spinner from 'components/Spinner';\n\nconst schema = object({\n  name: string().required(),\n  number: number('please write a number').required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsContactAdded);\n  const dispatch = useDispatch();\n\n  const onFormSubmit = (values, { resetForm }) => {\n    const loweredName = values.name.toLowerCase();\n\n    contacts.find(contact => contact.name.toLowerCase() === loweredName)\n      ? NotificationManager.error(\n          `${values.name} is already in contacts`,\n          'Error'\n        )\n      : dispatch(addContact(values)) && resetForm();\n  };\n\n  return (\n    <>\n      <Formik\n        initialValues={initialValues}\n        validationSchema={schema}\n        onSubmit={onFormSubmit}\n      >\n        <FormEl>\n          <Label>\n            Name\n            <Input\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n            <ErrorMessageEl name=\"name\" component=\"div\" />\n          </Label>\n          <Label>\n            Number\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n            <ErrorMessageEl name=\"number\" component=\"div\" />\n          </Label>\n          <Button type=\"submit\" disabled={isLoading}>\n            add contact\n            {isLoading && (\n              <Spinner\n                width={20}\n                height={20}\n                color=\"#3b5998\"\n                styles={{\n                  position: 'absolute',\n                  top: '50%',\n                  marginTop: -10,\n                  right: 6,\n                }}\n              />\n            )}\n          </Button>\n        </FormEl>\n      </Formik>\n\n      <NotificationContainer />\n    </>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  gap: 5px;\n  margin-bottom: 15px;\n`;\n\nexport const Input = styled.input`\n  font-size: 16px;\n  outline: none;\n  font-weight: 500;\n\n  border: 1px solid gray;\n  width: 350px;\n  padding: 11px;\n  border-radius: 4px;\n`;\n","// react\nimport { useSelector, useDispatch } from 'react-redux';\n// redux\nimport { changeFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/filter/filter-selectors';\n// styles\nimport { Label, Input } from './Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n\n  const handleChange = e => dispatch(changeFilter(e.target.value));\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input\n        placeholder=\"Find\"\n        type=\"text\"\n        name=\"filter\"\n        onChange={handleChange}\n        value={filter}\n      />\n    </Label>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const ContactsBookEl = styled.div``;\n\nexport const ContactsTitle = styled.h2`\n  text-align: center;\n  font-size: 34px;\n  margin-bottom: 20px;\n`;\n","// Components\nimport { ContactsList } from 'components/ContactsList';\nimport { ContactForm } from 'components/ContactForm';\nimport { Filter } from 'components/Filter';\n\nimport { ContactsBookEl, ContactsTitle } from './ContactsBook.styled';\n\nconst ContactsBook = () => {\n  return (\n    <ContactsBookEl>\n      <ContactForm />\n\n      <ContactsTitle>Contacts</ContactsTitle>\n      <Filter />\n      <ContactsList />\n    </ContactsBookEl>\n  );\n};\n\nexport default ContactsBook;\n"],"names":["selectFilter","state","filter","selectContacts","contacts","selectIsContactsFetching","isLoading","fetchContacts","selectIsContactAdded","addContact","selectFilteredContacts","createSelector","loweredFilter","toLowerCase","contact","name","includes","ListItem","styled","Button","Name","Number","id","number","dispatch","useDispatch","useState","setIsLoading","href","onClick","deleteContact","disabled","ContactsListEl","ContactsList","useEffect","useSelector","Spinner","width","height","styles","margin","map","FormEl","Form","Input","Field","ErrorMessageEl","ErrorMessage","Label","schema","object","string","required","initialValues","ContactForm","validationSchema","onSubmit","values","resetForm","loweredName","find","NotificationManager","type","pattern","title","component","color","position","top","marginTop","right","Filter","placeholder","onChange","e","changeFilter","target","value","ContactsBookEl","ContactsTitle"],"sourceRoot":""}